public Dictionary<string, Dictionary<VendorEnum, Dictionary<ScriptType, StringBuilder>>> generateScript_Delete_2G_2G_Nbrs_BCCH(NeighbourPlan neighbourPlan, ScriptPath k)
        {
            string sqlInternal = "";
            string sqlExternal = "";
            var deletionList = new List<Dictionary<string, object>>();

            if (k == ScriptPath.SiteDecom)
            {
                sqlInternal = $@"select a.* from cm_ericsson_gsm.vsdatagerancellrelation a, sitedecommission b  where 
                                b.cellname in (a.vsdatagerancellrelation_id, a.vsdatagerancell_id) and
                                b.planid  = {neighbourPlan.Id}";

                sqlExternal = $@"select a.* from cm_ericsson_gsm.vsdataexternalgerancellrelation a, sitedecommission b where
                                    b.cellname in (a.vsdataexternalgerancellrelation_id, a.vsdatagerancell_id) and b.planid  = {neighbourPlan.Id}";

                deletionList = new DbEntityManager().fillDictObject(sqlExternal);

                var externalCellNames = getExternalCellNames(neighbourPlan.getSiteDecomissionList().Select(c => c.CellName).ToList(), TechnologyEnum.gsm, VendorEnum.Ericsson, TechnologyEnum.gsm);

                foreach (var batchNames in externalCellNames.Select((c, i) => (Index: i, Names: c)).GroupBy(x => x.Index / 500))
                {
                    sqlExternal = $"select * from cm_ericsson_gsm.vsdataexternalgerancellrelation where vsdataexternalgerancellrelation_id in ({string.Join(",", batchNames.Select(c => $"'{c.Names}'"))})";

                    foreach (var externalCell in new DbEntityManager().fillDictObject(sqlExternal))
                        deletionList.Add(externalCell);
                }
            }
            //comes from internal
            //else if (k == ScriptPath.LacChange)
            //{
            //    sqlInternal = $@"select a.* from cm_ericsson_gsm.vsdatagerancellrelation a, PlannedCellFrequency b  where 
            //                    b.name in (a.vsdatagerancellrelation_id, a.vsdatagerancell_id) and
            //                    b.optimisationplanid  = {neighbourPlan.Id}";
            //}

            //comes from external
            else if (k == ScriptPath.Neighbourplan)
            {
                sqlExternal = $@"select a.* from cm_ericsson_gsm.vsdataexternalgerancellrelation a, plannedneighbour b 
                                    where b.sourcecellname = a.vsdatagerancell_id 
                                    and b.neighbourcellname = a.vsdataexternalgerancellrelation_id 
                                    and b.neighbourplanid  = {neighbourPlan.Id} and shouldadd = false";

                deletionList = new DbEntityManager().fillDictObject(sqlExternal);
            }
            else if (k == ScriptPath.GsmCutOver)
            {
                sqlInternal = $@"select a.* from cm_ericsson_gsm.vsdatagerancellrelation a, GsmCutoverCell b where not b.deleted and
                                b.name in (a.vsdatagerancellrelation_id, a.vsdatagerancell_id) and
                                b.planid  = {neighbourPlan.Id} and not b.deleted";

                sqlExternal = $@"select a.* from cm_ericsson_gsm.vsdataexternalgerancellrelation a, GsmCutoverCell b where not b.deleted and
                                    b.name in (a.vsdataexternalgerancellrelation_id)
                                    and b.planid  = {neighbourPlan.Id}";

                deletionList = new DbEntityManager().fillDictObject(sqlExternal);

                var externalCellNames = getExternalCellNames(neighbourPlan.getGsmCutoverCells().Select(c => c.Name).ToList(), TechnologyEnum.gsm, VendorEnum.Ericsson, TechnologyEnum.gsm);

                foreach (var batchNames in externalCellNames.Select((c, i) => (Index: i, Names: c)).GroupBy(x => x.Index / 500))
                {
                    sqlExternal = $"select * from cm_ericsson_gsm.vsdataexternalgerancellrelation where vsdataexternalgerancellrelation_id in ({string.Join(",", batchNames.Select(c => $"'{c.Names}'"))})";

                    foreach (var externalCell in new DbEntityManager().fillDictObject(sqlExternal))
                        deletionList.Add(externalCell);
                }
            }
            else
                return new Dictionary<string, Dictionary<VendorEnum, Dictionary<ScriptType, StringBuilder>>>();

            var dictInternal = new List<Dictionary<string, object>>();
            var neighboursToDelete = new List<object>();

            if (!string.IsNullOrEmpty(sqlInternal))
            {
                dictInternal = new DbEntityManager().fillDictObject(sqlInternal);
                if (k == ScriptPath.GsmCutOver)
                {
                    dictInternal = dictInternal.Where(c => !neighbourPlan.getGsmCutoverCells().Any(b => b.Name == c["vsdatagerancellrelation_id"].ToString())).ToList();
                }
                neighboursToDelete = dictInternal.Select(c => c["vsdatagerancell_id"]).ToList();
            }               

            var neighboursToDeleteExternal = deletionList.Select(c => c["vsdataexternalgerancellrelation_id"]).ToList();            

            neighboursToDelete.AddRange(neighboursToDeleteExternal);

            if(neighboursToDelete == null || neighboursToDelete.Count() == 0)
                return new Dictionary<string, Dictionary<VendorEnum, Dictionary<ScriptType, StringBuilder>>>();

            var ModifyList = new List<(Dictionary<string, object> infoArr, List<(string name, string value)> parametersList)>();

            var vsDataGeranCellCache = ObjectDispensary.getObjectDispensary().getAndCachePartialTable("cm_ericsson_gsm.vsDataGeranCell", new List<string>() { "mecontext_id", "subnetwork_2_id", "subnetwork_id", "bcchno", "vsdatagerancell_id", "balistactive", "balistidle" });

            var vsDatagerancellrelation = ObjectDispensary.getObjectDispensary().getAndCachePartialTable("cm_ericsson_gsm.vsdatagerancellrelation", new List<string>() { "vsdatagerancell_id", "gerancellrelationid" });

            var vsDataexternalgerancellrelation = ObjectDispensary.getObjectDispensary().getAndCachePartialTable("cm_ericsson_gsm.vsdataexternalgerancellrelation", new List<string>() { "vsdatagerancell_id", "externalgerancellrelationid" });

            //Find all neighbours in internal and external relation tables
            var internalAllNbrsGroupedBySource = vsDatagerancellrelation.GroupBy(c => c["vsdatagerancell_id"], c => c["gerancellrelationid"]).ToDictionary(c => c.Key, c => c.ToList());
            var externalAllNbrsGroupedBySource = vsDataexternalgerancellrelation.GroupBy(c => c["vsdatagerancell_id"], c => c["externalgerancellrelationid"]).ToDictionary(c => c.Key, c => c.ToList());

            //Find neighbours to delete in internal and external relation tables
            var internalNbrsToDelGroupedBySource = vsDatagerancellrelation.Where(c => neighboursToDelete.Contains(c["gerancellrelationid"])).GroupBy(c => c["vsdatagerancell_id"], c => c["gerancellrelationid"]).ToDictionary(c => c.Key, c => c.ToList());
            var externalNbrsToDelGroupedBySource = vsDataexternalgerancellrelation.Where(c => neighboursToDelete.Contains(c["externalgerancellrelationid"])).GroupBy(c => c["vsdatagerancell_id"], c => c["externalgerancellrelationid"]).ToDictionary(c => c.Key, c => c.ToList());

            //Combine internal and external neighbours on sourcecell           
            var combinedNeighboursToDel = internalNbrsToDelGroupedBySource.Concat(externalNbrsToDelGroupedBySource).ToLookup(c => c.Key, c => c.Value).ToDictionary(group => group.Key, group => group.SelectMany(x => x).ToList());
            var combinedNeighbours = internalAllNbrsGroupedBySource.Concat(externalAllNbrsGroupedBySource).ToLookup(c => c.Key, c => c.Value).ToDictionary(group => group.Key, group => group.SelectMany(x => x).ToList()).Where(c => combinedNeighboursToDel.Keys.Contains(c.Key));

            Dictionary<string, Dictionary<string, string>> FinalList = new Dictionary<string, Dictionary<string, string>>();
            //Get a combined dictionary of source -> neighbour, bcch where neighbour has a unique bcchno

            foreach (var source in combinedNeighbours)
            {
                if (!neighboursToDelete.Any(c => source.Value.Contains(c)))
                    continue;
                //All neighbours with bcchno
                Dictionary<string, string> allNbrsForSourceCell = vsDataGeranCellCache.Where(c => source.Value.Contains(c["vsdatagerancell_id"])).Select(c => new { neighbourcell = c["vsdatagerancell_id"], bcchno = c["bcchno"] }).ToDictionary(c => c.neighbourcell, c => c.bcchno);
                //Group on bcchno
                var groupedByBcchAllNbrs = allNbrsForSourceCell.GroupBy(c => c.Value).ToDictionary(c => c.Key, c => c.ToList());

                //Neighbours to delete with bcchno
                Dictionary<string, string> nbrsToDelForSourceCell = vsDataGeranCellCache.Where(c => source.Value.Contains(c["vsdatagerancell_id"]) && neighboursToDelete.Contains(c["vsdatagerancell_id"])).Select(c => new { neighbourcell = c["vsdatagerancell_id"], bcchno = c["bcchno"] }).ToDictionary(c => c.neighbourcell, c => c.bcchno);
                //Group on bcchno
                var groupedByBcchNbrsToDel = nbrsToDelForSourceCell.GroupBy(c => c.Value).ToDictionary(c => c.Key, c => c.ToList());

                ////////////
                var vsDataGeranCell = vsDataGeranCellCache.FirstOrDefault(c => c["vsdatagerancell_id"].ToString() == source.Key);

                string balistactive = vsDataGeranCell?["balistactive"];
                string balistidle = vsDataGeranCell?["balistidle"];


                if (string.IsNullOrEmpty(balistactive) || string.IsNullOrEmpty(balistidle))
                    continue;

                string sourceCellNodeName = vsDataGeranCell?["mecontext_id"];
                string Subnetwork = !string.IsNullOrEmpty(vsDataGeranCell?["subnetwork_id"]) ? vsDataGeranCell["subnetwork_id"] : "ENM_RAN";
                string Subnetwork2 = !string.IsNullOrEmpty(vsDataGeranCell?["subnetwork_2_id"]) ? vsDataGeranCell["subnetwork_2_id"] : "2G";
                string oss = OssNodeMap.getOssNameIfRelevant(sourceCellNodeName);

                var networkelementuniquename = $"vsDataGeranCell->{Subnetwork}:{Subnetwork2}:{sourceCellNodeName}:{sourceCellNodeName}:1:1:1:{source.Key}";

                var infoArr = new Dictionary<string, object>();
                infoArr = new Dictionary<string, object>() { { "_ossname", oss }, { "objecttype", "vsDataGeranCell" }, { "subnetwork_id", Subnetwork }, { "nodename", sourceCellNodeName }, { "networkelementuniquename", networkelementuniquename } };
                ////////////

                //test this
                foreach (var bcchno in groupedByBcchNbrsToDel)
                {
                    var countDelNbrs = bcchno.Value.Count();
                    
                    var countTotalNbrs = groupedByBcchAllNbrs.FirstOrDefault(c => c.Key == bcchno.Key).Value.Count();

                    //Compare total neighbours per bcch with deleted neighbours per bcch
                    if (countTotalNbrs != countDelNbrs)
                        continue;

                    var parametersList = new Dictionary<string, string>();

                    //Update balists
                    if (balistactive.Split(';').Contains(bcchno.Key))
                    {
                        string[] ActiveList = balistactive.Split(';');
                        parametersList.Add("balistactive", $"{string.Join(",", ActiveList.Where(c => c != bcchno.Key).ToArray())}");
                    }

                    if (balistidle.Split(';').Contains(bcchno.Key))
                    {
                        string[] IdleList = balistidle.Split(';');
                        parametersList.Add("balistidle", $"{string.Join(",", IdleList.Where(c => c != bcchno.Key).ToArray())}");
                    }

                    if (parametersList.Count() == 0)
                        continue;

                    var parametersArr = parametersList.Select(b => (b.Key, b.Value)).ToArray();
                    ModifyList.Add((infoArr, parametersArr.ToList()));
                }
            }

            if (ModifyList.Count() == 0)
                return new Dictionary<string, Dictionary<VendorEnum, Dictionary<ScriptType, StringBuilder>>>();

            return generateSplitScriptsUsingXMLTree(ModifyList, 500, ScriptAction.modify);
        }
